name: retrofitapi_flutter
description: A new Flutter project.

# The following line prevents the package from being accidentally published to
# pub.dev using `flutter pub publish`. This is preferred for private packages.
publish_to: 'none' # Remove this line if you wish to publish to pub.dev

# The following defines the version and build number for your application.
# A version number is three numbers separated by dots, like 1.2.43
# followed by an optional build number separated by a +.
# Both the version and the builder number may be overridden in flutter
# build by specifying --build-name and --build-number, respectively.
# In Android, build-name is used as versionName while build-number used as versionCode.
# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.
# Read more about iOS versioning at
# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
# In Windows, build-name is used as the major, minor, and patch parts
# of the product and file versions while build-number is used as the build suffix.
version: 1.0.0+1

environment:
  sdk: '>=2.19.0-197.0.dev <3.0.0'

# Dependencies specify other packages that your package needs in order to work.
# To automatically upgrade your package dependencies to the latest versions
# consider running `flutter pub upgrade --major-versions`. Alternatively,
# dependencies can be manually updated by changing the version numbers below to
# the latest version available on pub.dev. To see which dependencies have newer
# versions available, run `flutter pub outdated`.
dependencies:
  flutter:
    sdk: flutter


  # The following adds the Cupertino Icons font to your application.
  # Use with the CupertinoIcons class for iOS style icons.
  cupertino_icons: ^1.0.2

  # singleTon
  get_it: ^7.2.0

  # save share
  shared_preferences: ^2.0.13

  # dio fetch data
  dio: ^4.0.4
  retrofit: ^3.0.1+1
  connectivity: ^3.0.6
  pretty_dio_logger: ^1.1.1
  json_serializable: ^6.1.5
  heic_to_jpg: ^0.2.0
  json_annotation: ^4.4.0
  http: ^0.13.4
  logger: ^1.1.0
  flutter_gen: ^5.3.0
  cached_network_image: ^3.2.3
  font_awesome_flutter: ^10.4.0
  animate_do: ^2.1.0
  dropdown_button2: ^2.1.0
  #  audioplayers: ^4.0.1
  stream: ^3.0.3
  audioplayers: ^0.20.1
  cache_audio_player: ^1.0.0
  hive: ^2.0.4
  hive_flutter: ^1.1.0

  # state management block, redux, GetX , Provider
  provider: ^6.0.2
  flutter_svg: ^2.0.5
  # detector
  visibility_detector: ^0.3.3
  music: ^1.0.3
  colour: ^1.0.5
  gap: ^3.0.0
  extended_image: ^7.0.2
  path_provider: ^2.0.5
  intl: ^0.17.0
  just_waveform: ^0.0.5
  # query
#  flutter_audio_query: ^0.3.5+6


  flutter_spinkit: ^5.1.0
dev_dependencies:
  flutter_test:
    sdk: flutter

  build_runner:
  flutter_gen_runner:


  retrofit_generator: ^4.0.3+2
  # The "flutter_lints" package below contains a set of recommended lints to
  # encourage good coding practices. The lint set provided by the package is
  # activated in the `analysis_options.yaml` file located at the root of your
  # package. See that file for information about deactivating specific lint
  # rules and activating additional ones.
  flutter_lints: ^2.0.0

# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

# The following section is specific to Flutter packages.
flutter:

  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true

  # To add assets to your application, add an assets section, like this:
  assets:
    - assets/icons/
    - assets/images/
    - assets/music/
    - assets/audio/

  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/assets-and-images/#resolution-aware

  # For details regarding adding assets from package dependencies, see
  # https://flutter.dev/assets-and-images/#from-packages

  # To add custom fonts to your application, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  # fonts:
  #   - family: Schyler
  #     fonts:
  #       - asset: fonts/Schyler-Regular.ttf
  #       - asset: fonts/Schyler-Italic.ttf
  #         style: italic
  #   - family: Trajan Pro
  #     fonts:
  #       - asset: fonts/TrajanPro.ttf
  #       - asset: fonts/TrajanPro_Bold.ttf
  #         weight: 700
  #
  # For details regarding fonts from package dependencies,
  # see https://flutter.dev/custom-fonts/#from-packages
flutter_gen:
  output: lib/gen/ # Optional (default: lib/gen/)
  line_length: 80 # Optional (default: 80)

  # Optional
  integrations:
    flutter_svg: true
    flare_flutter: true
    rive: true
    lottie: true


#cupertino_icons: Package này cung cấp tập hợp các biểu tượng Cupertino (biểu tượng phong cách iOS) để sử dụng trong ứng dụng Flutter của bạn.
#
#get_it: Package này cung cấp một cơ chế dependency injection cho ứng dụng Flutter của bạn. Nó cho phép bạn đăng ký và truy xuất các đối tượng một cách dễ dàng thông qua một singleton.
#
#shared_preferences: Package này cung cấp các phương thức để lưu trữ và truy xuất dữ liệu trong bộ nhớ cục bộ của thiết bị. Nó hữu ích để lưu trữ các cài đặt người dùng và dữ liệu nhỏ khác trong ứng dụng của bạn.
#
#dio: Package này cung cấp các chức năng để tạo và quản lý các yêu cầu HTTP trong ứng dụng Flutter của bạn. Nó hỗ trợ các phương thức như GET, POST, PUT, DELETE và cung cấp các tùy chọn mở rộng cho việc xử lý yêu cầu.
#
#retrofit: Package này cung cấp các công cụ để tạo các interface dựa trên Retrofit trong Flutter. Nó giúp bạn định nghĩa và sử dụng dễ dàng các yêu cầu mạng RESTful trong ứng dụng của bạn.
#
#connectivity: Package này cung cấp các phương thức để kiểm tra trạng thái kết nối mạng của thiết bị, bao gồm kết nối Wi-Fi, kết nối dữ liệu di động và không có kết nối.
#
#pretty_dio_logger: Package này cung cấp một trình ghi (logger) cho thư viện Dio, giúp bạn ghi lại và hiển thị thông tin yêu cầu và phản hồi HTTP một cách dễ đọc và đẹp mắt.
#
#json_serializable: Package này cung cấp các công cụ để tạo mã tự động các phương thức toJson() và fromJson() cho các lớp model trong Flutter. Điều này giúp bạn dễ dàng chuyển đổi giữa các đối tượng Dart và định dạng JSON.
#
#heic_to_jpg: Package này cung cấp các chức năng để chuyển đổi các tệp HEIC (High Efficiency Image Format) sang định dạng JPG trong ứng dụng Flutter của bạn.
#
#http: Package này cung cấp một giao diện dễ sử dụng cho việc thực hiện các yêu cầu HTTP trong Flutter. Nó cung cấp các phương thức như GET, POST, PUT, DELETE và hỗ trợ xử lý yêu cầu và
#
#logger: Package này cung cấp một logger đơn giản để ghi lại thông tin và sự kiện trong quá trình chạy của ứng dụng Flutter. Nó giúp bạn theo dõi và gỡ lỗi các hoạt động của ứng dụng.
#
#flutter_gen: Package này cung cấp công cụ để tạo mã tự động từ tệp tài nguyên trong ứng dụng Flutter. Điều này giúp bạn truy cập các tài nguyên (hình ảnh, văn bản, biểu tượng, v.v.) một cách dễ dàng và an toàn.
#
#cached_network_image: Package này cung cấp một widget hình ảnh cho phép bạn tải và lưu trữ đệm hình ảnh từ một URL. Điều này giúp tăng hiệu suất và tốc độ tải hình ảnh trong ứng dụng của bạn.
#
#font_awesome_flutter: Package này cung cấp một bộ biểu tượng FontAwesome để sử dụng trong ứng dụng Flutter của bạn. Bạn có thể sử dụng các biểu tượng vector này để hiển thị các biểu tượng và biểu tượng trực quan.
#
#animate_do: Package này cung cấp các widget và hàm để tạo hiệu ứng hoạt hình trong ứng dụng Flutter của bạn. Bạn có thể sử dụng nó để thêm các hiệu ứng chuyển động và thay đổi trạng thái của các widget.
#
#dropdown_button2: Package này cung cấp một widget dropdown button (nút xổ xuống) mở rộng so với widget gốc DropdownButton trong Flutter. Nó cung cấp các tính năng tùy chỉnh và mở rộng hơn cho dropdown button trong giao diện của bạn.
#
#stream: Package này cung cấp các lớp và phương thức hỗ trợ cho việc làm việc với luồng dữ liệu (stream) trong ứng dụng Flutter của bạn. Nó giúp bạn xử lý, xử lý lỗi và biến đổi dữ liệu từ các luồng dữ liệu.
#
#audioplayers: Package này cung cấp các chức năng để chơi âm thanh trong ứng dụng Flutter của bạn. Bạn có thể chơi nhạc và âm thanh từ các nguồn khác nhau và điều chỉnh các thuộc tính như âm lượng và tiến độ.
#
#cache_audio_player: Package này cung cấp một trình phát âm thanh với khả năng lưu trữ đệm dữ liệu âm thanh, giúp tăng tốc độ tải và phát âm thanh mượt mà trong ứng dụng của bạn.
#
#hive: Package này cung
#  cấp một cơ sở dữ liệu đơn giản và nhanh chóng cho ứng dụng Flutter của bạn. Nó sử dụng mô hình key-value để lưu trữ dữ liệu và hỗ trợ các thao tác như lưu trữ, truy vấn và xóa dữ liệu.
#
#hive_flutter: Package này cung cấp tích hợp giữa Hive và Flutter, cho phép bạn sử dụng Hive trong ứng dụng Flutter của bạn. Nó cung cấp các phương thức và widget để quản lý và tương tác với cơ sở dữ liệu Hive.
#
#provider: Package này cung cấp một cách dễ dàng để quản lý trạng thái và chia sẻ dữ liệu giữa các widget trong ứng dụng Flutter của bạn. Nó cung cấp mô hình quản lý trạng thái dựa trên sự thay đổi và cung cấp cách thức tạo và sử dụng các Provider để chia sẻ dữ liệu.
#
#flutter_svg: Package này cung cấp một widget để hiển thị và tương tác với hình ảnh vector SVG trong ứng dụng Flutter của bạn. Nó hỗ trợ các tính năng như tạo hiệu ứng, zoom và tương tác với các phần tử trong hình ảnh SVG.
